alpha = _{ 'a'..'z' | 'A'..'Z' }
digit = _{ '0'..'9' }
rangetoken = _{ ":" }
WHITESPACE = _{ " " | "\t" | "\n" }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ (!"\n" ~ ANY)* ~ "\n" }

ID        = @{ alpha ~ (alpha | digit)* | "_" }
OPID      = @{ "op" ~ ("+" | "-" | "**" | "*" | "/" | "%" | "==" | "!=" | "<=" | ">=" | "<" | ">" | "&&" | "||") }
INT       = @{ digit+ }
FLOAT     = @{ digit+ ~ "." ~ digit+ }
INTIMAG   = @{ digit+ ~ "i" }
FLOATIMAG = @{ digit+ ~ "." ~ digit+ ~ "i" }
BINOP0    = @{ "||" }
BINOP1    = @{ "&&" }
BINOP2    = @{ "==" | "!=" | "<=" | ">=" | "<" | ">" }
BINOP3    = @{ "+" | "-" }
BINOP4    = @{ "*" | "/" | "%" }
BINOP5    = @{ "**" }
UNOP6     = @{ "-" | "!" }
BINOP7    = @{ "." | "$" }

prog = { stmt* }

stmt = {
    WHITESPACE* ~ stmt_assign ~ WHITESPACE*
  | WHITESPACE* ~ stmt_fundecl ~ WHITESPACE*
  | WHITESPACE* ~ stmt_print ~ WHITESPACE*
}
KW_LET = @{ "let" ~ (WHITESPACE | COMMENT) }
stmt_assign = { KW_LET ~ ID ~ "=" ~ expr ~ ";" }
KW_FUN = @{ "fun" ~ (WHITESPACE | COMMENT) }
stmt_fundecl = { KW_FUN ~ ID ~ type_param_list ~ param_list ~ ret_type ~ "=" ~ expr ~ ";" }
KW_PRINT = @{ "print" ~ (WHITESPACE | COMMENT) }
stmt_print = { KW_PRINT ~ expr ~ ";" }

/***** Expressions *****/

expr  = { expr1 ~ (BINOP0 ~ expr1)* }
expr1 = { expr2 ~ (BINOP1 ~ expr2)* }
expr2 = { expr3 ~ (BINOP2 ~ expr3)* }
expr3 = { expr4 ~ (BINOP3 ~ expr4)* }
expr4 = { expr5 ~ (BINOP4 ~ expr5)* }
expr5 = { expr6 ~ (BINOP5 ~ expr6)* }
expr6 = { UNOP6* ~ expr7 }
expr7 = { expr8 ~ (BINOP7 ~ expr8)* }
expr8 = { expr9 ~ paren_operator* }
expr9 = { expr_base }

expr_base = {
    block
  | matrix
  | list
  | lam_expr
  | tuple
  | parens_expr
  | bool
  | string
  | lam_basic
  | FLOATIMAG
  | INTIMAG
  | FLOAT
  | INT
  | OPID
  | ID
}

block = { "{" ~ stmt* ~ expr ~ "}" }

matrix = { mat_row+ }
mat_row = { "{" ~ expr ~ (","? ~ expr)* ~ ","? ~ "}" }

list = { "[" ~ (expr ~ ("," ~ expr)* ~ ","?)? ~ "]" }

lam_expr = { "lam" ~ type_param_list ~ param_list ~ ret_type ~ "=>" ~ expr }
type_param_list = { ("<" ~ ID ~ ("," ~ ID)* ~ ","? ~ ">")? }
param_list = { "(" ~ (param ~ ("," ~ param)*)? ~ ","? ~ ")" }
ret_type = { (":" ~ type_expr)? }
param = { ID ~ (":" ~ type_expr)? }

lam_basic = { ID ~ "=>" ~ expr }

tuple = {
    "(" ~ expr ~ "," ~ ")"
  | "(" ~ expr ~ "," ~ expr ~ ")"
  | "(" ~ expr ~ ("," ~ expr)+ ~ ","? ~ ")"
}

parens_expr = { "(" ~ expr ~ ")" }

bool = { "true" | "false" }

string = @{
    "'" ~ ("\\'" | (!"'" ~ ANY))* ~ "'"
  | "\"" ~ ("\\\"" | (!"\"" ~ ANY))* ~ "\""
}

paren_operator = {
    "(" ~ kwarg_list ~ ")"
  | "(" ~ arg_list ~ ")"
  | "[" ~ slice ~ ("," ~ slice)? ~ "]"
}

arg_list = { (expr ~ ("," ~ expr)* ~ ","?)? }
kwarg_list = { kwarg ~ ("," ~ kwarg)* ~ ","? }
kwarg = { ID ~ "=" ~ expr }

slice = { slice_ny | slice_nn | slice_yy | slice_yn | expr }
slice_ny = { rangetoken ~ expr }
slice_nn = { rangetoken }
slice_yy = { expr ~ rangetoken ~ expr }
slice_yn = { expr ~ rangetoken }

/***** Types *****/

type_expr = {
    function_type
  | tuple_type
  | compound_type
  | atomic_type
}
function_type = { "(" ~ (type_expr ~ ("," ~ type_expr)*)? ~ ")" ~ "->" ~ type_expr }
tuple_type = { "(" ~ type_expr ~ ("," ~ type_expr)+ ~ ")" }
compound_type = { ID ~ "<" ~ type_expr ~ ("," ~ type_expr)* ~ ">" }
atomic_type = { ID }
